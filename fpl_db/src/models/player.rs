use chrono::{DateTime, NaiveDate, Utc};
use fpl_api::responses::game_state::PlayerOverview;
use fpl_api::responses::player::{PlayerFixture, PlayerHistory, PlayerHistoryPast};
use fpl_common::types::{ClubId, FixtureId, GameWeekId, PlayerId};

#[derive(Debug, sqlx::FromRow)]
pub struct Player {
    pub id: PlayerId,
    pub can_transact: bool,
    pub can_select: bool,
    pub chance_of_playing_next_round: Option<i16>,
    pub chance_of_playing_this_round: Option<i16>,
    pub code: i32,
    pub cost_change_event: i16,
    pub cost_change_event_fall: i16,
    pub cost_change_start: i16,
    pub cost_change_start_fall: i16,
    pub dreamteam_count: i16,
    pub element_type: i16,
    pub ep_next: f32,
    pub ep_this: f32,
    pub event_points: i16,
    pub first_name: String,
    pub form: Option<f32>,
    pub in_dreamteam: bool,
    pub news: String,
    pub news_added: Option<DateTime<Utc>>,
    pub now_cost: i16,
    pub photo: String,
    pub points_per_game: f32,
    pub removed: bool,
    pub second_name: String,
    pub selected_by_percent: f32,
    pub special: bool,
    pub squad_number: Option<i16>,
    pub status: String,
    pub team: ClubId,
    pub team_code: i16,
    pub total_points: i16,
    pub transfers_in: i32,
    pub transfers_in_event: i32,
    pub transfers_out: i32,
    pub transfers_out_event: i32,
    pub value_form: f32,
    pub value_season: f32,
    pub web_name: String,
    pub region: Option<i16>,
    pub team_join_date: Option<NaiveDate>,
    pub minutes: i16,
    pub goals_scored: i16,
    pub assists: i16,
    pub clean_sheets: i16,
    pub goals_conceded: i16,
    pub own_goals: i16,
    pub penalties_saved: i16,
    pub penalties_missed: i16,
    pub yellow_cards: i16,
    pub red_cards: i16,
    pub saves: i16,
    pub bonus: i16,
    pub bps: i16,
    pub influence: f32,
    pub creativity: f32,
    pub threat: f32,
    pub ict_index: f32,
    pub starts: i16,
    pub expected_goals: f32,
    pub expected_assists: f32,
    pub expected_goal_involvements: f32,
    pub expected_goals_conceded: f32,
    pub influence_rank: i16,
    pub influence_rank_type: i16,
    pub creativity_rank: i16,
    pub creativity_rank_type: i16,
    pub threat_rank: i16,
    pub threat_rank_type: i16,
    pub ict_index_rank: i16,
    pub ict_index_rank_type: i16,
    pub corners_and_indirect_freekicks_order: Option<i16>,
    pub corners_and_indirect_freekicks_text: String,
    pub direct_freekicks_order: Option<i16>,
    pub direct_freekicks_text: String,
    pub penalties_order: Option<i16>,
    pub penalties_text: String,
    pub expected_goals_per_90: f32,
    pub saves_per_90: f32,
    pub expected_assists_per_90: f32,
    pub expected_goal_involvements_per_90: f32,
    pub expected_goals_conceded_per_90: f32,
    pub goals_conceded_per_90: f32,
    pub now_cost_rank: i16,
    pub now_cost_rank_type: i16,
    pub form_rank: i16,
    pub form_rank_type: i16,
    pub points_per_game_rank: i16,
    pub points_per_game_rank_type: i16,
    pub selected_rank: i16,
    pub selected_rank_type: i16,
    pub starts_per_90: f32,
    pub clean_sheets_per_90: f32,
}

impl From<&PlayerOverview> for Player {
    fn from(player: &PlayerOverview) -> Self {
        Self {
            id: player.id,
            can_transact: player.can_transact,
            can_select: player.can_select,
            chance_of_playing_next_round: player.chance_of_playing_next_round,
            chance_of_playing_this_round: player.chance_of_playing_this_round,
            code: player.code,
            cost_change_event: player.cost_change_event,
            cost_change_event_fall: player.cost_change_event_fall,
            cost_change_start: player.cost_change_start,
            cost_change_start_fall: player.cost_change_start_fall,
            dreamteam_count: player.dreamteam_count,
            element_type: player.element_type,
            ep_next: player.ep_next,
            ep_this: player.ep_this,
            event_points: player.event_points,
            first_name: player.first_name.clone(),
            form: player.form,
            in_dreamteam: player.in_dreamteam,
            news: player.news.clone(),
            news_added: player.news_added,
            now_cost: player.now_cost,
            photo: player.photo.clone(),
            points_per_game: player.points_per_game,
            removed: player.removed,
            second_name: player.second_name.clone(),
            selected_by_percent: player.selected_by_percent,
            special: player.special,
            squad_number: player.squad_number,
            status: player.status.clone(),
            team: player.team,
            team_code: player.team_code,
            total_points: player.total_points,
            transfers_in: player.transfers_in,
            transfers_in_event: player.transfers_in_event,
            transfers_out: player.transfers_out,
            transfers_out_event: player.transfers_out_event,
            value_form: player.value_form,
            value_season: player.value_season,
            web_name: player.web_name.clone(),
            region: player.region,
            team_join_date: player.team_join_date,
            minutes: player.minutes,
            goals_scored: player.goals_scored,
            assists: player.assists,
            clean_sheets: player.clean_sheets,
            goals_conceded: player.goals_conceded,
            own_goals: player.own_goals,
            penalties_saved: player.penalties_saved,
            penalties_missed: player.penalties_missed,
            yellow_cards: player.yellow_cards,
            red_cards: player.red_cards,
            saves: player.saves,
            bonus: player.bonus,
            bps: player.bps,
            influence: player.influence,
            creativity: player.creativity,
            threat: player.threat,
            ict_index: player.ict_index,
            starts: player.starts,
            expected_goals: player.expected_goals,
            expected_assists: player.expected_assists,
            expected_goal_involvements: player.expected_goal_involvements,
            expected_goals_conceded: player.expected_goals_conceded,
            influence_rank: player.influence_rank,
            influence_rank_type: player.influence_rank_type,
            creativity_rank: player.creativity_rank,
            creativity_rank_type: player.creativity_rank_type,
            threat_rank: player.threat_rank,
            threat_rank_type: player.threat_rank_type,
            ict_index_rank: player.ict_index_rank,
            ict_index_rank_type: player.ict_index_rank_type,
            corners_and_indirect_freekicks_order: player.corners_and_indirect_freekicks_order,
            corners_and_indirect_freekicks_text: player.corners_and_indirect_freekicks_text.clone(),
            direct_freekicks_order: player.direct_freekicks_order,
            direct_freekicks_text: player.direct_freekicks_text.clone(),
            penalties_order: player.penalties_order,
            penalties_text: player.penalties_text.clone(),
            expected_goals_per_90: player.expected_goals_per_90,
            saves_per_90: player.saves_per_90,
            expected_assists_per_90: player.expected_assists_per_90,
            expected_goal_involvements_per_90: player.expected_goal_involvements_per_90,
            expected_goals_conceded_per_90: player.expected_goals_conceded_per_90,
            goals_conceded_per_90: player.goals_conceded_per_90,
            now_cost_rank: player.now_cost_rank,
            now_cost_rank_type: player.now_cost_rank_type,
            form_rank: player.form_rank,
            form_rank_type: player.form_rank_type,
            points_per_game_rank: player.points_per_game_rank,
            points_per_game_rank_type: player.points_per_game_rank_type,
            selected_rank: player.selected_rank,
            selected_rank_type: player.selected_rank_type,
            starts_per_90: player.starts_per_90,
            clean_sheets_per_90: player.clean_sheets_per_90,
        }
    }
}

#[derive(Debug, sqlx::FromRow)]
pub struct PlayerFixtureDb {
    pub player_id: PlayerId,
    pub fixture_id: FixtureId,
    pub event_name: Option<String>,
    pub is_home: bool,
    pub difficulty: i16,
}

impl From<(PlayerId, &PlayerFixture)> for PlayerFixtureDb {
    fn from((player_id, player_fixture): (PlayerId, &PlayerFixture)) -> Self {
        Self {
            player_id,
            fixture_id: player_fixture.common.id,
            event_name: player_fixture.event_name.clone(),
            is_home: player_fixture.is_home,
            difficulty: player_fixture.difficulty,
        }
    }
}

#[derive(Debug, sqlx::FromRow)]
pub struct PlayerHistoryPastDb {
    pub player_id: PlayerId,
    pub season_name: String,
    pub element_code: i32,
    pub start_cost: i16,
    pub end_cost: i16,
    pub total_points: i16,
    pub minutes: i16,
    pub goals_scored: i16,
    pub assists: i16,
    pub clean_sheets: i16,
    pub goals_conceded: i16,
    pub own_goals: i16,
    pub penalties_saved: i16,
    pub penalties_missed: i16,
    pub yellow_cards: i16,
    pub red_cards: i16,
    pub saves: i16,
    pub bonus: i16,
    pub bps: i16,
    pub influence: f32,
    pub creativity: f32,
    pub threat: f32,
    pub ict_index: f32,
    pub starts: i16,
    pub expected_goals: f32,
    pub expected_assists: f32,
    pub expected_goal_involvements: f32,
    pub expected_goals_conceded: f32,
}

impl From<(PlayerId, &PlayerHistoryPast)> for PlayerHistoryPastDb {
    fn from((player_id, past): (PlayerId, &PlayerHistoryPast)) -> Self {
        Self {
            player_id,
            season_name: past.season_name.clone(),
            element_code: past.element_code,
            start_cost: past.start_cost,
            end_cost: past.end_cost,
            total_points: past.total_points,
            minutes: past.minutes,
            goals_scored: past.goals_scored,
            assists: past.assists,
            clean_sheets: past.clean_sheets,
            goals_conceded: past.goals_conceded,
            own_goals: past.own_goals,
            penalties_saved: past.penalties_saved,
            penalties_missed: past.penalties_missed,
            yellow_cards: past.yellow_cards,
            red_cards: past.red_cards,
            saves: past.saves,
            bonus: past.bonus,
            bps: past.bps,
            influence: past.influence,
            creativity: past.creativity,
            threat: past.threat,
            ict_index: past.ict_index,
            starts: past.starts,
            expected_goals: past.expected_goals,
            expected_assists: past.expected_assists,
            expected_goal_involvements: past.expected_goal_involvements,
            expected_goals_conceded: past.expected_goals_conceded,
        }
    }
}

#[derive(Debug, sqlx::FromRow)]
pub struct PlayerHistoryDb {
    pub player_id: PlayerId,
    pub fixture_id: FixtureId,
    pub opponent_team: i16,
    pub total_points: i16,
    pub was_home: bool,
    pub kickoff_time: DateTime<Utc>,
    pub team_h_score: Option<i16>,
    pub team_a_score: Option<i16>,
    pub round: GameWeekId,
    pub minutes: i16,
    pub goals_scored: i16,
    pub assists: i16,
    pub clean_sheets: i16,
    pub goals_conceded: i16,
    pub own_goals: i16,
    pub penalties_saved: i16,
    pub penalties_missed: i16,
    pub yellow_cards: i16,
    pub red_cards: i16,
    pub saves: i16,
    pub bonus: i16,
    pub bps: i16,
    pub influence: f32,
    pub creativity: f32,
    pub threat: f32,
    pub ict_index: f32,
    pub starts: i16,
    pub expected_goals: f32,
    pub expected_assists: f32,
    pub expected_goal_involvements: f32,
    pub expected_goals_conceded: f32,
    pub value: i16,
    pub transfers_balance: i32,
    pub selected: i32,
    pub transfers_in: i32,
    pub transfers_out: i32,
}

impl From<&PlayerHistory> for PlayerHistoryDb {
    fn from(history: &PlayerHistory) -> Self {
        Self {
            player_id: history.element,
            fixture_id: history.fixture,
            opponent_team: history.opponent_team,
            total_points: history.total_points,
            was_home: history.was_home,
            kickoff_time: history.kickoff_time,
            team_h_score: history.team_h_score,
            team_a_score: history.team_a_score,
            round: history.round,
            minutes: history.minutes,
            goals_scored: history.goals_scored,
            assists: history.assists,
            clean_sheets: history.clean_sheets,
            goals_conceded: history.goals_conceded,
            own_goals: history.own_goals,
            penalties_saved: history.penalties_saved,
            penalties_missed: history.penalties_missed,
            yellow_cards: history.yellow_cards,
            red_cards: history.red_cards,
            saves: history.saves,
            bonus: history.bonus,
            bps: history.bps,
            influence: history.influence,
            creativity: history.creativity,
            threat: history.threat,
            ict_index: history.ict_index,
            starts: history.starts,
            expected_goals: history.expected_goals,
            expected_assists: history.expected_assists,
            expected_goal_involvements: history.expected_goal_involvements,
            expected_goals_conceded: history.expected_goals_conceded,
            value: history.value,
            transfers_balance: history.transfers_balance,
            selected: history.selected,
            transfers_in: history.transfers_in,
            transfers_out: history.transfers_out,
        }
    }
}
